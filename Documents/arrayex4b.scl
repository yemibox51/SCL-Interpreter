import "scl.h"
import "basic_lib.h"
/* Program: arrayex4.scl 
   This program tests various operations on arrays
   including pointer operations
   J Garrido, 1-7-2016
*/
symbol MAX 55
symbol PI M_PI

forward declarations
struct ystruct 
function diff return  array [] of type double 
 parameters 
       a array [] of type double, num_elements of type integer
definetype struct ystruct  txsxsx
function myadd return pointer of type float 
function myf2 return struct xsxs
function myf3 return pointer of struct ystruct
function myf4 return pointer of structype txsxsx

function myf5 return pointer of type double
  parameters
function pointer pfff return pointer of structype txsxsx 
     parameters x of type integer, y pointer of type double endpointer,
    numpts of type double, tt of type integer, pttr array[] of type float

specifications
enumerate weekdays is 
   Monday, Tuesday, Wednesday, Thursday, Friday 
endenum weekdays
struct mystructure is
  variables
     define sss of type integer
     define x of type float
     define y pointer of type integer
     define rrr of type double
     define ss of type string
     define xxxp pointer of type void
  structures
     define xxxx pointer of struct ystruct
endstruct  mystructure
  
struct ystruct is
 variables
  define a of type integer
  define b of type float
  define c of type double
endstruct ystruct



global declarations
constants
  define MMAX  = 45 of type integer  // max elements
variables
  define file myinfile
  define file myoutfile
  define y of type double
  define x of type double
  define px pointer of type double
  define varm2 array[MAX] of type double
structures  
  define wday of enum weekday
  
implementations
/*
  This program computes the differences of an array
  */
 function main is
    constants
      define ARRAY_SIZE = 50 of type integer
    variables
      define qq array [MMAX][ARRAY_SIZE] of type double
      define marray array [] of type double
      define kelements of type integer
      define j of type integer
      define k of type integer
      define kk of type integer
      define resd of type integer
      define resm of type integer
      define myarray array [ARRAY_SIZE] of type double
      define dyy of type double
      define pyy pointer of type double
      define mflag of type bool
    structures 
      define yy of struct ystruct
      define abc of struct ystruct
      define ddd pointer of struct ystruct
      define mmyst pointer of struct mystructure
      define eee of structype txsxsx
      define myst of struct mystructure
    begin
      // set mmyst->y = myst.y
      set y of mmyst = myst.y
      // set dyy = mmyst->y
      set dyy = y of mmyst
      // set kk = myst.y
      set kk = y in myst
      
      display "check display ", dyy, kk
      set myst.y = address yy 
      open input myinfile using "cinterp1.dat"
      open output myoutfile using "prog1.dat"
      call ttrtt using address yy, eee
      set dyy = trtrtr(address yy, eee)
      input "Number of elements: ", kelements
      set j = 0
      read dyy, kk
      for j = 0 to kelements -1 do
         set myarray[j] = j + (rand()+1.25)
         display "element value: ", myarray[j] 
      endfor
      set abc.c = 23.5
      set j = 7
      set kk = 2
      set resd = j / kk 
      set resm = j mod kk
      display "resd: ", resd, " resm: ", resm
      if j  equal to kk
       then
         display kk
       elseif j equals j
        then set k = 20
       else
          set k = 45
      endif
      // set yy = myarray[j]
      set pyy = address myarray[j]
      set dyy = deref pyy
      set marray = diff(myarray, kelements)
      file read myinfile j, kelements
      //
      display "Difference values in marray "
      for j = 0 to kelements - 2 do
         display "element: ", j, " marray[j]: ", marray[j] 
         set marray[j] = abc.c
         set marray[j+1] = PI * sin(y) + x^j
         set ddd = address abc
         set yy = deref ddd
         set ddd->c = 23.67
      endfor
      increment j
      display "j: ", j
      file write myoutfile marray[j], kelements 

      case j is
        when 0:
            display "j is 0"
        when 1:
            display "j is 1"
        default:
            display "j is: ", j
      endcase
      
      close myoutfile
      close myinfile
      // set dyy = square()
      return 0
 endfun main 
   //
 description
        The following function computes the differences of
        consecutive elements in the argument array.
   */
 function diff return array [] of type double 
    parameters 
       a array [] of type double, num_elements  of type integer
   is
   variables                            // local variables
       define i of type integer         // used as index of the array
       define n of type integer
       define barray array [] of type double
       define csize of type integer
   begin
       set n = num_elements - 1
       // create barray array[n] of type double
       set csize = n*sizeof(double)
       set barray = malloc(csize)
       set i = 1
       display "computing differences"
       for i = 0 to n-1 do
            set barray[i] = a[i+1] - a[i]
       endfor
       return barray
 endfun diff

 
